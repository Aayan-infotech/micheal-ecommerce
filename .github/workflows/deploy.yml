name: CI/CD Pipeline (GitHub Actions + Kubernetes)

on:
  push:
    branches:
      - main  # Runs when code is pushed to main branch

env:
  GITHUB_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub's cloud VM

    steps:
      # 1Ô∏è‚É£ Checkout the GitHub repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Run Unit Tests
      - name: Run Unit Tests
        run: |
          npm install --legacy-peer-deps
          npm test

      # 3Ô∏è‚É£ Run Linting
      - name: Run ESLint
        run: npm run lint

      # 4Ô∏è‚É£ Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5Ô∏è‚É£ Generate Next Image Tag (stage-v1 ‚Üí stage-v2 ‚Üí stage-v3 ‚Ä¶ and latest is prodv1)
      - name: Get Latest Stage Tag and Increment
        id: tag
        run: |
          LATEST_STAGE_TAG=$(curl -s https://hub.docker.com/v2/repositories/amazingatul/ecom-web/tags/ | jq -r '.results[].name' | grep -E '^stage-v[0-9]+$' | sort -V | tail -n1 | awk -F'v' '{print $2}')
          if [ -z "$LATEST_STAGE_TAG" ]; then
            NEW_STAGE_TAG="stage-v1"
          else
            NEW_STAGE_TAG="stage-v$((LATEST_STAGE_TAG + 1))"
          fi
          echo "NEW_STAGE_TAG=$NEW_STAGE_TAG" >> $GITHUB_ENV
          echo "STAGE_TAG=$NEW_STAGE_TAG"

      # 6Ô∏è‚É£ Build the Docker image
      - name: Build Docker Image
        run: docker build -t amazingatul/ecom-web . 2>&1 | tee failure.log

      # 7Ô∏è‚É£ Tag the Docker image
      - name: Tag Docker Image
        run: |
          docker tag amazingatul/ecom-web amazingatul/ecom-web:$NEW_STAGE_TAG
          docker tag amazingatul/ecom-web amazingatul/ecom-web:prodv1

      # 8Ô∏è‚É£ Security Scan with Trivy (Fail if High Vulnerabilities)
      - name: Scan Docker Image with Trivy
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL amazingatul/ecom-web:$NEW_STAGE_TAG

      # 9Ô∏è‚É£ Push the image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push amazingatul/ecom-web:$NEW_STAGE_TAG
          docker push amazingatul/ecom-web:prodv1

      # üîü Remove Old Images (Keep only last 4 stage versions + latest prodv1)
      - name: Cleanup Old Docker Images
        run: |
          OLD_IMAGES=$(docker images amazingatul/ecom-web --format "{{.Tag}}" | grep 'stage-v' | sort -V | head -n -4)
          for tag in $OLD_IMAGES; do
            docker rmi amazingatul/ecom-web:$tag || true
          done

      # üî• Update Kubernetes Manifest (`k8s-deploy.yml`) with Only Latest `prodv1` Tag
      - name: Update Image Tag in k8s-deploy.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking current image reference in k8s-deploy.yml:"
          cat k8s/k8s-deploy.yml | grep "image: amazingatul/ecom-web" || echo "No match found!"

          # Update image tag in deployment file
          sed -i 's|image: amazingatul/ecom-web:.*|image: amazingatul/ecom-web:prodv1|' k8s/k8s-deploy.yml

          echo "Checking updated image reference in k8s-deploy.yml:"
          cat k8s/k8s-deploy.yml | grep "image: amazingatul/ecom-web" || echo "No match found!"

          # Git configurations
          git config --global user.email "ci@github.com"
          git config --global user.name "GitHub Actions"

          # Add changes, check if there's something to commit, and push only if needed
          git add k8s/k8s-deploy.yml
          git diff --quiet && echo "No changes to commit" || (git commit -m "Update image to prodv1" && git push origin main)

      # üî• Send Email Notification on Failure
      - name: Send Email on Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "üö® Deployment Failed"
          body: |
            ‚ùå Oops, the latest deployment has failed.
            üîç Logs: Attached below.
            üîó GitHub Actions Run: ${{ env.GITHUB_RUN_URL }}
          to: "atulrajput.work@gmail.com"
          from: "development.aayaninfotech@gmail.com"
          attachments: failure.log
